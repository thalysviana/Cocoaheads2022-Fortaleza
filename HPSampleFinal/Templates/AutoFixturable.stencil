{% macro fixtureParams type %}
{% for variable in type.allVariables where not variable.isComputed %}
        {{variable.name}}: {{variable.typeName}} = {% call paramValue variable %}{% if not forloop.last %},{% endif %}
{% endfor %}
{% endmacro %}

{% macro paramValue variable %}{% if variable|annotated:"example" %}{{variable.annotations.example}}{% elif not variable.defaultValue == nil %}{{variable.defaultValue}}{% else %}{% call fallbackParamValue variable %}{% endif %}{% endmacro %}

{% macro fallbackParamValue paramType %}{% for type in types.all where type.annotations.FixturableValues %}{% for variable in type.variables where not variable.isComputed  %}{% if variable.name|replace:" ","" == paramType.unwrappedTypeName|replace:" ","" %}{{variable.defaultValue}}{% endif %}{% endfor %}{% endfor %}{% endmacro %}

{% for type in types.all where type.annotations.AutoFixturable %}
{% if type.name != "AutoMockable" and (type.path|contains:argument.containedPathSubstringToApplyTemplate or type.annotations.DisableContainedPathSubstringToApplyTemplate) %}
// sourcery:file:{{ type.name | replace:".","+"}}Fixtures
// 💙💙 Autogenerated for saving Beegees time ⏰
// swiftlint:disable all

@testable import {{argument.testableImport}}
{% for import in type.allImports %}
import {{import}}
{% endfor %}
{% if type.annotations.extraImport %}
@testable import {{type.annotations.extraImport}}
{% endif %}

extension {{type.name}} {
    static func fixture(
        {% call fixtureParams type %}
    ) -> {{type.name}} {
        return .init(
            {% for variable in type.allVariables where not variable.isComputed %}
            {{variable.name}}: {{variable.name}}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
}
// sourcery:end
{% endif %}
{% endfor %}

